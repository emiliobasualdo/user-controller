basePath: /
definitions:
  dtos.AccountDto:
    properties:
      dni:
        example: "21399433"
        type: string
      email:
        example: moni.argento@hotmail.com
        type: string
      lastName:
        example: Potrelli de Argento
        type: string
      name:
        example: Mónica
        type: string
    required:
    - dni
    - email
    - lastName
    - name
    type: object
  dtos.InstrumentDto:
    properties:
      creditType:
        enum:
        - DEBIT
        - ' CREDIT'
        - ' PREPAID'
        example: DEBIT
        type: string
      holder:
        example: José Pepe Argento
        type: string
      issuer:
        example: Banco Itaú
        type: string
      lastFourNumbers:
        example: "4930"
        type: string
      pps:
        enum:
        - VISA
        - ' AMEX'
        - ' MC'
        example: VISA
        type: string
      validThru:
        example: 11/24
        type: string
    required:
    - creditType
    - holder
    - issuer
    - lastFourNumbers
    - pps
    - validThru
    type: object
  dtos.LoginDto:
    properties:
      code:
        example: "123654"
        type: string
      phoneNumber:
        example: "+5491133071114"
        type: string
    required:
    - code
    - phoneNumber
    type: object
  dtos.PhoneNumberDto:
    properties:
      phoneNumber:
        example: "+5491133071114"
        type: string
    required:
    - phoneNumber
    type: object
  dtos.TokenDto:
    properties:
      code:
        example: 200
        type: integer
      expire:
        example: "2020-07-08T15:58:45+02:00"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTQyMTY3MjUsIm9yaWdfaWF0IjoxNTk0MjEzMTI1fQ.tWsDdREGVc2dPW7ZrcsoastWqfZm0s0w-oy6w0jH7YI
        type: string
    type: object
  dtos.TransactionDto:
    properties:
      amount:
        example: 1504.56
        type: number
      destinationAccountId:
        example: 3
        type: integer
      instrumentId:
        example: 5
        type: integer
    required:
    - amount
    - destinationAccountId
    - instrumentId
    type: object
  models.Account:
    properties:
      balance:
        example: 5430.54
        type: number
      beneficiaries:
        items:
          $ref: '#/definitions/models.Beneficiary'
        type: array
      createdAt:
        example: "2020-07-07T11:38:09.157803072Z"
        type: string
      dni:
        example: "21399433"
        type: string
      email:
        example: moni.argento@hotmail.com
        type: string
      id:
        example: 5
        type: integer
      instruments:
        items:
          $ref: '#/definitions/models.Instrument'
        type: array
      lastName:
        example: Potrelli de Argento
        type: string
      name:
        example: Mónica
        type: string
      phoneNumber:
        example: "+5491133071114"
        type: string
    type: object
  models.Beneficiary:
    properties:
      accountId:
        example: 8
        type: integer
      lastName:
        example: Argento
        type: string
      name:
        example: Alfio Coqui
        type: string
    type: object
  models.Instrument:
    properties:
      accountId:
        example: 3
        type: integer
      createdAt:
        example: 2020-07-07 13:36:15.738848+02:00
        type: string
      creditType:
        enum:
        - DEBIT
        - ' CREDIT'
        - ' PREPAID'
        example: DEBIT
        type: string
      holder:
        example: José Pepe Argento
        type: string
      id:
        example: 1
        type: integer
      issuer:
        example: Banco Itaú
        type: string
      lastFourNumbers:
        example: "4930"
        type: string
      pps:
        enum:
        - VISA
        - ' AMEX'
        - ' MC'
        example: VISA
        type: string
      validThru:
        example: 11/24
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        example: 1504.56
        type: number
      createdAt:
        example: 2020-07-07 13:36:15.738848+02:00
        type: string
      destinationAccountId:
        example: 19
        type: integer
      id:
        example: 1
        type: integer
      instrumentId:
        example: 5
        type: integer
      originAccountId:
        example: 3
        type: integer
    type: object
host: localhost:5000
info:
  contact:
    email: ebasualdo@itba.edu.ar
    name: API Support
  description: This is the main server where wallet transactions for the Más Simple Wallet will be received
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Más Simple Wallet-Controller API
  version: "1.0"
paths:
  /auth/login:
    post:
      description: Returns a jwt token to use as authentication
      operationId: Get User
      parameters:
      - description: user's phone number and the received sms code
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TokenDto'
        "401":
          description: Invalid phone and code combination
          schema:
            type: string
      summary: Generate a jwt
  /auth/sms-code:
    post:
      description: Sends an sms to the specified phonenumber
      operationId: Get User
      parameters:
      - description: user's phone number
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dtos.PhoneNumberDto'
      responses:
        "200": {}
        "400":
          description: Something went wrong
          schema:
            type: string
      summary: SMS auth
  /me:
    get:
      description: Returns a list of the available instruments uploaded by the client
      operationId: Get Instruments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Account'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: ' "no such user'
          schema:
            type: string
      summary: Get available Instruments
    post:
      description: Replaces all the account information with the information pased
      operationId: Edit account
      parameters:
      - description: Fields to edit
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dtos.AccountDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Account'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: ' "no such user'
          schema:
            type: string
      summary: Edit account information
  /me/instruments:
    get:
      description: Returns a list of the available instruments uploaded by the client
      operationId: Get Instruments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Instrument'
            type: array
        "400":
          description: Illegal token
          schema:
            type: string
        "404":
          description: ' "no such user'
          schema:
            type: string
      summary: Get available Instruments
    post:
      description: |-
        Inserts and instrument to the list of available user instruments
        Return the instrument object with its id
      operationId: Insert instrument
      parameters:
      - description: Id of the user that requests the instruments
        in: path
        name: id
        required: true
        type: integer
      - description: Instrument to insert
        in: body
        name: instrument
        required: true
        schema:
          $ref: '#/definitions/dtos.InstrumentDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Instrument'
            type: array
        "400":
          description: The id provided is illegal
          schema:
            type: string
        "404":
          description: id does not exist
          schema:
            type: string
      summary: Insert instrument
  /me/instruments/{id}:
    delete:
      description: Deletes one of the instruments available to the user
      operationId: Delete Instruments
      parameters:
      - description: Id of the instrument to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Card deleted
          schema:
            type: string
        "400":
          description: ' "The id provided is illegal'
          schema:
            type: string
        "404":
          description: ' "id does not exist'
          schema:
            type: string
      summary: Delete an Instrument
  /me/transactions:
    get:
      description: Returns all time transactions history
      operationId: Get transactions history
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "404":
          description: No such user
          schema:
            type: string
      summary: Get transaction history
    post:
      description: Executes as transaction and returns it's full details
      operationId: Execute transaction
      parameters:
      - description: Transaction to execute to insert
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dtos.TransactionDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: The transaction provided is illegal
          schema:
            type: string
      summary: Execute transaction
securityDefinitions:
  JWT-Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
